name: CI Pipeline

# Define quando a pipeline será executada
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      # A. Checkout do código (usando o exemplo do professor)
      - name: Checar repositório
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0  # Necessário para versionamento

      # B. Install: Não há dependências para instalar, mas podemos instalar uma ferramenta para validar HTML
      - name: Install HTML validator
        run: npm install -g htmlhint

      # C. Build: Não há build para HTML, mas podemos validar a sintaxe do HTML
      - name: Validate HTML
        run: htmlhint *.html  # Valida todos os arquivos HTML no diretório

      # D. Testes unitários: Como é uma página estática, não há testes unitários, mas mantemos a validação acima como "teste"

      # E. Cobertura de testes: Não aplicável para HTML estático, então pulamos essa etapa

      # F. Versionamento (adaptado do exemplo do professor)
      - name: Instalar semver
        run: npm install -g semver

      - name: Criar nova tag caso não exista
        id: create_initial_tag
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          if [ -z "$(git tag)" ]; then
            git config --global user.name 'github-actions'
            git config --global user.email 'github-actions@github.com'
            git tag -a v0.0.0 -m "Initial release"
            git push origin v0.0.0
          fi

      - name: Calcular nova versão
        id: version
        run: |
          git fetch --tags
          LAST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          if [ -z "$LAST_TAG" ]; then
            LAST_TAG="v0.0.0"
          fi
          echo "Versão Atual: $LAST_TAG"
          
          if [ "$LAST_TAG" = "v0.0.0" ]; then
            COMMITS=$(git log --pretty=format:"%s")
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s")
          fi
          
          echo "Commits desde a última tag:"
          echo "$COMMITS"
          
          # Inicializando variáveis
          MAJOR=0
          MINOR=0
          PATCH=0
          
          # Analisando mensagens de commit
          for COMMIT in $COMMITS; do
            if [[ "$COMMIT" == *"BREAKING CHANGE"* ]]; then
              MAJOR=1
            elif [[ "$COMMIT" == *"feat"* ]]; then
              MINOR=1
            elif [[ "$COMMIT" == *"fix"* ]]; then
              PATCH=1
            fi
          done
          
          # Calculando a nova versão usando semver
          CURRENT_VERSION=${LAST_TAG#v}
          NEW_VERSION=$CURRENT_VERSION
          if [[ $MAJOR -eq 1 ]]; then
            NEW_VERSION=$(semver -i major $CURRENT_VERSION)
          elif [[ $MINOR -eq 1 ]]; then
            NEW_VERSION=$(semver -i minor $CURRENT_VERSION)
          elif [[ $PATCH -eq 1 ]]; then
            NEW_VERSION=$(semver -i patch $CURRENT_VERSION)
          fi
          
          echo "Nova versão: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV

      # Como não há package.json, pulamos a atualização do package.json, mas mantemos o commit e a tag
      - name: Commit e push
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git commit --allow-empty -m "chore(release): version ${{ env.new_version }}"
          git tag v${{ env.new_version }}
          git push origin main --tags

      # G. Envio de e-mail (adaptado do exemplo do professor, mas para todos os casos)
      - name: Enviar e-mail com resultado
        if: always()  # Roda sempre (sucesso ou falha)
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_ORIGEM }}
          password: ${{ secrets.SENHA_EMAIL }}
          subject: 'CI Pipeline Result - ${{ github.repository }}'
          body: |
            Build Status: ${{ job.status }}
            Commit: ${{ github.sha }}
            Run: ${{ github.run_id }}
            Check the details at: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: fe.dsm.vot.001@gmail.com
          from: ${{ secrets.EMAIL_ORIGEM }}
